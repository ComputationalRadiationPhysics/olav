
    /////////////////////////////////////////////////////////////////////////////
    // Expand a range-compressed vector

    float3 expand(float3 v)
    {
       return (v - 0.5) * 2;
    }

    // compress a normalized vector
    float3 compress(float3 v)
    {
       return (v * 0.5) + 0.5 ;
    }



    ////////////////////////////////////////////////////////////////////////////
    // connector structures

    struct VIn {
        float4 p    : POSITION;
        float2 uv   : TEXCOORD0;
    };

    struct  VOut {
        float4 p    : POSITION;
        float2 uv   : TEXCOORD0;
    };



    /////////////////////////////////////////////////////////////////////////////
    // vertex program

    VOut Mix_AmbientOcclusion_vs(      
          VIn IN,
        uniform float4x4 wvpMat
          )
    {
        VOut OUT;
       
          OUT.p = mul(wvpMat, IN.p);
        OUT.uv.xy = IN.uv;

        return OUT;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SSAO based on http://www.gamedev.net/reference/programming/features/simpleSSAO/ by José María Méndez, MIT license





    float3 getPosition(sampler2D g_buffer_pos, in float2 uv)
    {
    return tex2D(g_buffer_pos,uv).xyz;
    }

    float3 getNormal(sampler2D g_buffer_norm, in float2 uv)
    {
       return=tex2D(g_buffer_norm, uv).xyz ;
    }





    float doAmbientOcclusion(sampler2D g_buffer_pos, float2 tcoord,in float2 uv, in float3 p, in float3 cnorm)
    {
       float g_intensity=128;
       float g_scale=1.0;
       float g_bias=0.0;

    float3 diff = getPosition(g_buffer_pos, tcoord + uv) - p;
    const float3 v = normalize(diff);
    const float d = length(diff)*g_scale;
       return max(0.0,dot(cnorm,v)-g_bias)*(1.0/(1.0+d))*g_intensity;

       
    }

    void Mix_AmbientOcclusion_ps(   VOut IN,
                            uniform float4 TexSize,
                            out float4 colour : COLOR,
                            uniform sampler2D Tex_Norm   : TEXUNIT0,
                            uniform sampler2D Tex_Pos         : TEXUNIT1,
                            uniform sampler2D Tex_Rand      : TEXUNIT2
    )
    {


    const float2 vec[4] = {
                                           float2(1,0),
                                           float2(-1,0),
                                           float2(0,1),
                                           float2(0,-1)
                                        };

       float4 Pos= tex2D(Tex_Pos, IN.uv);
    float3 p = Pos.xyz;
    float3 n = getNormal(Tex_Norm, IN.uv);


    float2 rand = normalize(tex2D(Tex_Rand, TexSize * IN.uv / 64.0).xy * 2.0f - 1.0f) ;

    float ao = 0.0f;
       float g_sample_rad=32.0 ;
    float rad = g_sample_rad/p.z;




    int iterations = 4;
    for (int j = 0; j < iterations; ++j)
    {
      float2 coord1 = reflect(vec[j],rand)*rad;
      float2 coord2 = float2(coord1.x*0.707 - coord1.y*0.707, coord1.x*0.707 + coord1.y*0.707);
     
      ao += doAmbientOcclusion(Tex_Pos, IN.uv,coord1*0.25, p, n);
      ao += doAmbientOcclusion(Tex_Pos, IN.uv,coord2*0.5, p, n);
      ao += doAmbientOcclusion(Tex_Pos, IN.uv,coord1*0.75, p, n);
      ao += doAmbientOcclusion(Tex_Pos, IN.uv,coord2, p, n);
    }
    ao/=(float)iterations*4.0;

       
       ao=1-ao ;


    //Do stuff here with your occlusion value “ao”: modulate ambient lighting, write it to a buffer for later //use, etc.
       colour=float4(ao,ao,ao, 1) ;
    }

